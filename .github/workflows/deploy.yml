name: Deploy BAS App to BTP Subaccounts

on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Or a suitable runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's required Node.js version

      - name: Install Cloud MTA Build Tool (MBT)
        run: npm install -g mbt

      - name: Install Cloud Foundry CLI
        run: |
           wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo gpg --dearmor -o /usr/share/keyrings/cli.cloudfoundry.org.gpg
           echo "deb [signed-by=/usr/share/keyrings/cli.cloudfoundry.org.gpg] https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list
           sudo apt update
           sudo apt install cf8-cli


      # --- CRITICAL DEBUGGING STEP ---
      - name: List Plugins in CF-Community Repository to find MTA plugin name
        run: cf repo-plugins -r CF-Community
        # This step is designed to FAIL the workflow if 'cf' isn't found,
        # but its primary purpose is to print the list of plugins to the logs.
        # You will look at the output of this step.
      # --- END CRITICAL DEBUGGING STEP ---

      # This step will likely still fail initially, but we need the output from the above.
      - name: Install Cloud Foundry CLI MTA Plugin (placeholder, will update after debug)
        # You can keep 'mta' here, or comment this step out for now if you prefer,
        # but ensure the 'List Plugins' step runs.
        run: cf install-plugin -r CF-Community multiapps -f
     
      # ... (rest of your workflow for building and deploying)
      # --- CRITICAL MISSING STEP: Install Node.js dependencies for app1 ---
      # Your package.json is in app1/, so npm ci needs to run there.
      - name: Install Node.js dependencies 'app1'.
        run: npm ci
        working-directory: ./app1/ # <--- Add this crucial line!

      - name: Build MTA Archive
        run: mbt build -p=cf # Builds the .mtar file at the repository root
        # No 'working-directory' needed here as mta.yaml is at the repo root.

      # --- Deployment to Development Subaccount ---
      - name: Log in to Dev Subaccount
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME_DEV }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD_DEV }}
        run: |
          cf api ${{ secrets.CF_API_DEV }} --skip-ssl-validation
          cf auth $CF_USERNAME_DEV $CF_PASSWORD_DEV
 
      - name: Target Dev Org and Space
        run: cf target -o ${{ secrets.CF_ORG_DEV }} -s ${{ secrets.CF_SPACE_DEV }}
 
      - name: Deploy to Dev Subaccount
        run: cf deploy mta_archives/*.mtar -f # Assuming your .mtar is in mta_archives/
 
      # --- Deployment to QA Subaccount (Example) ---
      - name: Log in to QA Subaccount
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME_DEV }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD_DEV }}
        run: |
          cf api ${{ secrets.CF_API_QA }} --skip-ssl-validation
          cf auth $CF_USERNAME_DEV $CF_PASSWORD_DEV
 
      - name: Target QA Org and Space
        run: cf target -o ${{ secrets.CF_ORG_QA }} -s ${{ secrets.CF_SPACE_QA }}
 
      - name: Deploy to QA Subaccount
        run: cf deploy mta_archives/*.mtar -f
 
      # Add more deployment steps for other subaccounts (e.g., Production)
      # You might want to use different triggers or manual approvals for production deployments.
