name: Deploy BAS App to BTP Subaccounts
 
on:
  push:
    branches:
      - main # Trigger on pushes to the main branch
  workflow_dispatch: # Allows manual triggering
 
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Or a suitable runner
 
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
 
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18' # Or your project's required Node.js version
 
      - name: Install Cloud MTA Build Tool (MBT)
        run: npm install -g mbt
 
      - name: Build MTA Archive
        run: mbt build -p=cf # Builds the .mtar file
 
# ... (previous steps: Checkout, Setup Node.js, Install MBT) ...

# ... (previous steps: Checkout, Setup Node.js, Install MBT) ...

      - name: Install Cloud Foundry CLI (Direct Download)
        run: |
          # Define CF CLI version (you can specify a fixed one, e.g., '8.8.0')
          # Using 'latest' is convenient but can break if new version has breaking changes.
          CF_CLI_VERSION="latest" 
          
          # Determine the appropriate download URL for Linux (ubuntu-latest)
          # CF_CLI_DOWNLOAD_URL="https://cli.run.pivotal.io/stable?release=linux64-binary&version=${CF_CLI_VERSION}"
          # The above is an older URL, let's use the one from GitHub releases which is more stable
          CF_CLI_DOWNLOAD_URL="https://github.com/cloudfoundry/cli/releases/${CF_CLI_VERSION}/download/cf8-linux-amd64.tgz"

          # Create a directory for the CLI
          mkdir -p "$HOME/bin"

          # Download and extract the CF CLI
          curl -L "${CF_CLI_DOWNLOAD_URL}" | tar -xz -C "$HOME/bin"
          
          # Add the CF CLI to the PATH for the current session
          echo "$HOME/bin" >> $GITHUB_PATH
          
          # Verify installation
          cf version

      # ... (subsequent steps: Install npm dependencies, Build MTA, Locate MTA, Deploy to CTMS) ...

      # ... (subsequent steps: Install npm dependencies, Build MTA, Locate MTA, Deploy to CTMS) ...
  # Ensure you are running this in a suitable environment (e.g., ubuntu-latest)
  # within your GitHub Actions workflow.
 
      # --- Deployment to Development Subaccount ---
      - name: Log in to Dev Subaccount
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD }}
        run: |
          cf api ${{ secrets.CF_API_ENDPOINT }} --skip-ssl-validation
          cf auth $CF_USERNAME $CF_PASSWORD
 
      - name: Target Dev Org and Space
        run: cf target -o ${{ secrets.CF_ORG }} -s ${{ secrets.CF_SPACE }}
 
      - name: Deploy to Dev Subaccount
        run: cf deploy mta_archives/*.mtar -f # Assuming your .mtar is in mta_archives/
 
      # --- Deployment to QA Subaccount (Example) ---
      - name: Log in to QA Subaccount
        env:
          CF_USERNAME: ${{ secrets.CF_USERNAME_QA }}
          CF_PASSWORD: ${{ secrets.CF_PASSWORD_QA }}
        run: |
          cf api ${{ secrets.CF_API_QA }} --skip-ssl-validation
          cf auth $CF_USERNAME_QA $CF_PASSWORD_QA
 
      - name: Target QA Org and Space
        run: cf target -o ${{ secrets.CF_ORG_QA }} -s ${{ secrets.CF_SPACE_QA }}
 
      - name: Deploy to QA Subaccount
        run: cf deploy mta_archives/*.mtar -f
